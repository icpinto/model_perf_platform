name: CI/CD Workflow

on:
  push:
    branches:
      - develop

jobs:
  # Job to determine which components have changed
  determine-changes:
    runs-on: ubuntu-latest
    outputs:
      react_changed: ${{ steps.changes.outputs.react_changed }}
      flask_changed: ${{ steps.changes.outputs.flask_changed }}
      fastapi_changed: ${{ steps.changes.outputs.fastapi_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Determine changed components
        id: changes
        run: |
          # Check if files in reactapp, flaskapp, or fastapiapp have changed
          if git rev-parse --verify HEAD~1 >/dev/null 2>&1; then
            echo "react_changed=$(git diff --name-only HEAD~1 HEAD | grep -q '^reactapp/' && echo true || echo false)" >> $GITHUB_ENV
            echo "flask_changed=$(git diff --name-only HEAD~1 HEAD | grep -q '^flaskapp/' && echo true || echo false)" >> $GITHUB_ENV
            echo "fastapi_changed=$(git diff --name-only HEAD~1 HEAD | grep -q '^fastapiapp/' && echo true || echo false)" >> $GITHUB_ENV
          else
            # No previous commit (first commit case)
            echo "react_changed=false" >> $GITHUB_ENV
            echo "flask_changed=false" >> $GITHUB_ENV
            echo "fastapi_changed=false" >> $GITHUB_ENV
          fi
  # Job for building and testing React frontend
  build-test-react:
    runs-on: ubuntu-latest
    if: ${{ needs.determine-changes.outputs.react_changed == 'true' }}
    needs: determine-changes
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies
        run: |
          cd reactapp
          npm install
      
      #- name: Run tests
      #  run: |
      #  cd reactapp
      #  npm test -- --watchAll=false

      - name: Build React app
        run: |
          cd reactapp
          npm run build

      - name: Build Docker image
        run: |
          docker build -t username/react-app ./reactapp

  # Job for building and testing Flask backend
  build-test-flask:
    runs-on: ubuntu-latest
    if: ${{ needs.determine-changes.outputs.flask_changed == 'true' }}
    needs: determine-changes
    services:
      db:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: model_performance_db
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=5
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          cd flaskapp
          pip install -r requirements.txt

      #- name: Run tests
      #  run: |
      #    cd flaskapp
      #    pytest

      - name: Build Docker image
        run: |
          docker build -t username/flask-app ./flaskapp

  # Job for building and testing FastAPI service
  build-test-fastapi:
    runs-on: ubuntu-latest
    if: ${{ needs.determine-changes.outputs.fastapi_changed == 'true' }}
    needs: determine-changes
    services:
      db:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: model_performance_db
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=5
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          cd fastapiapp
          pip install -r requirements.txt

      #- name: Run tests
      #  run: |
      #    cd fastapiapp
      #    pytest

      - name: Build Docker image
        run: |
          docker build -t username/fastapi-app ./fastapiapp

  # Job for deploying the services with Docker Compose
  deploy:
    runs-on: ubuntu-latest
    needs: [build-test-react, build-test-flask, build-test-fastapi]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Conditional Build and Push React Image
        if: ${{ needs.determine-changes.outputs.react_changed == 'true' }}
        run: |
          docker build -t username/react-app ./reactapp
          docker push username/react-app

      - name: Conditional Build and Push Flask Image
        if: ${{ needs.determine-changes.outputs.flask_changed == 'true' }}
        run: |
          docker build -t username/flask-app ./flaskapp
          docker push username/flask-app

      - name: Conditional Build and Push FastAPI Image
        if: ${{ needs.determine-changes.outputs.fastapi_changed == 'true' }}
        run: |
          docker build -t username/fastapi-app ./fastapiapp
          docker push username/fastapi-app

      - name: Deploy with Docker Compose
        run: |
          docker-compose -f docker-compose.yml up -d
