name: CI/CD Workflow

on:
  push:
    branches:
      - develop

jobs:
  # Job to determine which components have changed
  determine-changes:
    runs-on: ubuntu-latest
    outputs:
      react_changed: ${{ steps.changes.outputs.react_changed }}
      flask_changed: ${{ steps.changes.outputs.flask_changed }}
      fastapi_changed: ${{ steps.changes.outputs.fastapi_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2  # Fetch the last two commits to ensure HEAD^ works

      - name: Determine changed components
        id: changes
        run: |
          # Check changes in the current commit and set outputs directly
          if git diff --name-only HEAD^ | grep -q '^reactapp/'; then
            echo "::set-output name=react_changed::true"
          else
            echo "::set-output name=react_changed::false"
          fi
          
          if git diff --name-only HEAD^ | grep -q '^flaskapp/'; then
            echo "::set-output name=flask_changed::true"
          else
            echo "::set-output name=flask_changed::false"
          fi

          if git diff --name-only HEAD^ | grep -q '^fastapiapp/'; then
            echo "::set-output name=fastapi_changed::true"
          else
            echo "::set-output name=fastapi_changed::false"
          fi


          echo "React Changed: ${{ needs.determine-changes.outputs.react_changed }}"


  # Job for building and testing React frontend
  build-test-react:
    runs-on: ubuntu-latest
    if: ${{ needs.determine-changes.outputs.react_changed == 'true' }}
    needs: determine-changes
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies
        run: |
          cd reactapp
          npm install
      
      #- name: Run tests
      #  run: |
      #  cd reactapp
      #  npm test -- --watchAll=false
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build React app
        run: |
          cd reactapp
          npm run build

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/reactapp ./reactapp
          docker push ${{ secrets.DOCKER_USERNAME }}/reactapp

  # Job for building and testing Flask backend
  build-test-flask:
    runs-on: ubuntu-latest
    if: ${{ needs.determine-changes.outputs.flask_changed == 'true' }}
    needs: determine-changes
    services:
      db:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: model_performance_db
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=5
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          cd flaskapp
          pip install -r requirements.txt

      #- name: Run tests
      #  run: |
      #    cd flaskapp
      #    pytest
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/flaskapp ./flaskapp
          docker push ${{ secrets.DOCKER_USERNAME }}/flaskapp

  # Job for building and testing FastAPI service
  build-test-fastapi:
    runs-on: ubuntu-latest
    if: ${{ needs.determine-changes.outputs.fastapi_changed == 'true' }}
    needs: determine-changes
    services:
      db:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: model_performance_db
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=5
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          cd fastapiapp
          pip install -r requirements.txt

      #- name: Run tests
      #  run: |
      #    cd fastapiapp
      #    pytest
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/fastapiapp ./fastapiapp
          docker push ${{ secrets.DOCKER_USERNAME }}/fastapiapp

  
