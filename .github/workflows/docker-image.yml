name: CI/CD Workflow

on:
  push:
    branches:
      - develop

jobs:
  # Job to determine which components have changed
  determine-changes:
    runs-on: ubuntu-latest
    outputs:
      react_changed: ${{ steps.changes.outputs.react_changed }}
      flask_changed: ${{ steps.changes.outputs.flask_changed }}
      fastapi_changed: ${{ steps.changes.outputs.fastapi_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 2  # Fetch the last two commits to ensure HEAD^ works

      - name: Determine changed components
        id: changes
        run: |
          # Check changes in the current commit and set outputs directly
          if git diff --name-only HEAD^ | grep -q '^reactapp/'; then
            echo "::set-output name=react_changed::true"
          else
            echo "::set-output name=react_changed::false"
          fi
          
          if git diff --name-only HEAD^ | grep -q '^flaskapp/'; then
            echo "::set-output name=flask_changed::true"
          else
            echo "::set-output name=flask_changed::false"
          fi

          if git diff --name-only HEAD^ | grep -q '^fastapiapp/'; then
            echo "::set-output name=fastapi_changed::true"
          else
            echo "::set-output name=fastapi_changed::false"
          fi


          echo "React Changed: ${{ needs.determine-changes.outputs.react_changed }}"


  # Job for building and testing React frontend
  build-test-react:
    runs-on: ubuntu-latest
    if: ${{ needs.determine-changes.outputs.react_changed == 'true' }}
    needs: determine-changes
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install dependencies
        run: |
          cd reactapp
          npm install
      
      #- name: Run tests
      #  run: |
      #  cd reactapp
      #  npm test -- --watchAll=false
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build React app
        run: |
          cd reactapp
          CI=false npm run build

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/model_perf_platform_reactapp ./reactapp
          docker push ${{ secrets.DOCKER_USERNAME }}/model_perf_platform_reactapp

  # Job for building and testing Flask backend
  build-test-flask:
    runs-on: ubuntu-latest
    if: ${{ needs.determine-changes.outputs.flask_changed == 'true' }}
    needs: determine-changes
    services:
      db:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: model_performance_db
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=5
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          cd flaskapp
          pip install -r requirements.txt

      #- name: Run tests
      #  run: |
      #    cd flaskapp
      #    pytest
      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/model_perf_platform_flaskapp ./flaskapp
          docker push ${{ secrets.DOCKER_USERNAME }}/model_perf_platform_flaskapp

  # Job for building and testing FastAPI service
  build-test-fastapi:
    runs-on: ubuntu-latest
    if: ${{ needs.determine-changes.outputs.fastapi_changed == 'true' }}
    needs: determine-changes

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          cd fastapiapp
          pip install -r requirements.txt

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up custom Docker network
        run: |
          docker network create fastapi-network

      - name: Run cAdvisor container
        run: |
          docker run -d \
            --name cadvisor \
            --network fastapi-network \
            --mount type=bind,source=/var/run/docker.sock,destination=/var/run/docker.sock \
            --publish 8080:8080 \
            --detach \
            google/cadvisor:latest

      - name: Run Prometheus container
        run: |
          docker run -d \
            --name prometheus \
            --network fastapi-network \
            --mount type=bind,source=${{ github.workspace }}/prometheus.yml,destination=/etc/prometheus/prometheus.yml \
            --add-host host.docker.internal:host-gateway \
            -p 9090:9090 \
            prom/prometheus

      - name: Run FastAPI container
        run: |
          docker run -d \
            --name fastapiapp \
            --network fastapi-network \
            -p 8000:8000 \
            ${{ secrets.DOCKER_USERNAME }}/model_perf_platform_fastapiapp

      - name: Wait for services to be ready
        run: |
          sleep 15  # Wait for containers to initialize

      - name: Run Load Test using Locust
        run: |
           timeout 1m docker run --rm -v ${{ github.workspace }}/fastapiapp/load-test:/mnt locustio/locust \
            -f /mnt/locustfile.py --host=http//fastapi-app:8000 || echo "Timeout reached, continuing..."

      - name: Query Prometheus for Resource Metrics
        run: |
          mkdir -p metrics
          # Query CPU usage for FastAPI container
          curl -G 'http://localhost:9090/api/v1/query' --data-urlencode 'query=rate(container_cpu_usage_seconds_total{container="fastapiapp"}[1m])' > metrics/cpu_usage.json
          # Query memory usage for FastAPI container
          curl -G 'http://localhost:9090/api/v1/query' --data-urlencode 'query=container_memory_usage_bytes{container="fastapiapp"}' > metrics/memory_usage.json
          # Query network receive bytes for FastAPI container
          curl -G 'http://localhost:9090/api/v1/query' --data-urlencode 'query=rate(container_network_receive_bytes_total{container="fastapiapp"}[1m])' > metrics/network_receive.json
          # Query network transmit bytes for FastAPI container
          curl -G 'http://localhost:9090/api/v1/query' --data-urlencode 'query=rate(container_network_transmit_bytes_total{container="fastapiapp"}[1m])' > metrics/network_transmit.json
          # Query disk read/write bytes for FastAPI container
          curl -G 'http://localhost:9090/api/v1/query' --data-urlencode 'query=rate(container_fs_io_time_seconds_total{container="fastapiapp"}[1m])' > metrics/disk_io.json

      - name: Save Metrics as Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: prometheus-metrics
          path: metrics/

      

      